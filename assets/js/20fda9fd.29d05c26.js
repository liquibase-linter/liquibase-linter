"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4463],{9937:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=t(4848),i=t(8453);const o={title:"Implementing a Custom Reporter"},s=void 0,a={id:"custom-reporters",title:"Implementing a Custom Reporter",description:"While Liquibase Linter has some good core reporters, you may have a use case that's particular to your project and",source:"@site/docs/custom-reporters.md",sourceDirName:".",slug:"/custom-reporters",permalink:"/liquibase-linter/docs/custom-reporters",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Implementing a Custom Reporter"},sidebar:"docs",previous:{title:"Using Reporters",permalink:"/liquibase-linter/docs/reporting/"},next:{title:"console",permalink:"/liquibase-linter/docs/reporting/console"}},c={},l=[{value:"Writing the reporter",id:"writing-the-reporter",level:2},{value:"Sample <code>Reporter</code> implementation",id:"sample-reporter-implementation",level:3},{value:"Making the reporter discoverable",id:"making-the-reporter-discoverable",level:2},{value:"Configuring the reporter in Maven",id:"configuring-the-reporter-in-maven",level:2},{value:"Adding custom config to the <code>Reporter</code>",id:"adding-custom-config-to-the-reporter",level:2}];function p(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"While Liquibase Linter has some good core reporters, you may have a use case that's particular to your project and\nwouldn't make sense as a core reporter."}),"\n",(0,n.jsx)(r.p,{children:"Fortunately it's trivial to implement custom reporters and apply them in your own project; you just need to write a\nJava class implementing the reporting interface and do a little configuration."}),"\n",(0,n.jsx)(r.h2,{id:"writing-the-reporter",children:"Writing the reporter"}),"\n",(0,n.jsx)(r.p,{children:"There are a few interfaces to implement when writing a custom reporter in Java:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.a,{href:"https://github.com/whiteclarkegroup/liquibase-linter/blob/master/src/main/java/com/whiteclarkegroup/liquibaselinter/report/Reporter.java",children:"Reporter"})," is the actual interface that your reporter must implement"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.a,{href:"https://github.com/whiteclarkegroup/liquibase-linter/blob/master/src/main/java/com/whiteclarkegroup/liquibaselinter/report/Reporter.java",children:"Reporter.Factory"})," is the piece which ties the reporter into the ",(0,n.jsx)(r.code,{children:"lqlint.json"})," configuration."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Fortunately, there are existing abstract classes that make this easy to do. Furthermore, the ",(0,n.jsx)(r.code,{children:"Reporter.Factory"})," can\nexist as inner classes to the main ",(0,n.jsx)(r.code,{children:"Reporter"})," implementation."]}),"\n",(0,n.jsxs)(r.h3,{id:"sample-reporter-implementation",children:["Sample ",(0,n.jsx)(r.code,{children:"Reporter"})," implementation"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'package com.fake.fancyapp.liquibase;\n\nimport com.whiteclarkegroup.liquibaselinter.report.AbstractReporter;\nimport com.whiteclarkegroup.liquibaselinter.report.Report;\nimport com.whiteclarkegroup.liquibaselinter.report.ReporterConfig;\nimport com.whiteclarkegroup.liquibaselinter.report.ReportItem;\nimport java.util.List;\nimport java.io.PrintWriter;\n\npublic class CustomReporter extends AbstractReporter {\n    private static final String NAME = "custom-reporter";\n\n    public CustomReporter(ReporterConfig config) {\n        super(config, "ext"); // reports will have a `.ext` file extension\n    }\n\n    @Override\n    protected void printReport(PrintWriter output, Report report, List<ReportItem> items) {\n        // The \'items\' have already been filtered.\n        // All that is left to do is produce the output.\n        // Alternatively, extend an existing core reporter and override methods.\n    }\n\n    public static class Factory extends AbstractReporter.Factory<CustomReporter> {\n        public Factory() {\n            super(NAME);\n        }\n    }\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Some notes about how we've done this:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Extend the ",(0,n.jsx)(r.code,{children:"AbstractReporter"})," class, which saves us from creating a lot of boilerplate ourselves."]}),"\n",(0,n.jsxs)(r.li,{children:["Create ",(0,n.jsx)(r.code,{children:"Factory"}),". This links the ",(0,n.jsx)(r.code,{children:"CustomReporter"})," to the Liquibase Linter configuration."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["All the core reporters are implemented in this way as well, so if you're not sure how best to hook something up you\nmight try looking in the source at\n",(0,n.jsx)(r.a,{href:"https://github.com/whiteclarkegroup/liquibase-linter/tree/master/src/main/java/com/whiteclarkegroup/liquibaselinter/report",children:"some existing core reporters"}),"\nthat do something similar"]}),"\n",(0,n.jsx)(r.h2,{id:"making-the-reporter-discoverable",children:"Making the reporter discoverable"}),"\n",(0,n.jsxs)(r.p,{children:["The class above should go into a new Maven project that depends on both ",(0,n.jsx)(r.code,{children:"liquibase-linter"})," and ",(0,n.jsx)(r.code,{children:"liquibase"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["The fact that the class exists isn't quite enough on its own; we need to tell Liquibase Linter that it's there. For this\nwe are using the ",(0,n.jsx)(r.a,{href:"https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html",children:"Service Provider Interface"})," pattern -\nthis is natively supported in Java and for use cases like this is preferable to powerful-but-heavy classpath scanning\napproaches like that used by Spring."]}),"\n",(0,n.jsx)(r.p,{children:"In our newly-created project, we'll create a new file at:"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"src/main/resources/META-INF/services/com.whiteclarkegroup.liquibaselinter.report.Reporter.Factory"})}),"\n",(0,n.jsx)(r.p,{children:"And in the file, we'll write:"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"com.fake.fancyapp.liquibase.CustomReporter.Factory"})}),"\n",(0,n.jsx)(r.h2,{id:"configuring-the-reporter-in-maven",children:"Configuring the reporter in Maven"}),"\n",(0,n.jsxs)(r.p,{children:["In the project where our scripts live, we'll add a dependency on our reporters project to ",(0,n.jsx)(r.code,{children:"liquibase-maven-plugin"}),", in\nmuch the same way that we ",(0,n.jsxs)(r.a,{href:"/liquibase-linter/docs/configure",children:["added a dependency for ",(0,n.jsx)(r.code,{children:"liquibase-linter"})," originally"]}),".\nSo for our example custom reporting project ",(0,n.jsx)(r.code,{children:"wcg-liquibase-linter"})," we would have the following dependency."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:"<plugin>\n    <groupId>org.liquibase</groupId>\n    <artifactId>liquibase-maven-plugin</artifactId>\n    <configuration>\n        ...\n    </configuration>\n    <dependencies>\n        <dependency>\n            <groupId>com.whiteclarkegroup</groupId>\n            <artifactId>liquibase-linter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.fake.fancyapp</groupId>\n            <artifactId>liquibase-reporters</artifactId>\n            <version>0.1.0</version>\n        </dependency>\n    </dependencies>\n    <executions>\n        ...\n    </executions>\n</plugin>\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Then all we need is to ",(0,n.jsx)(r.a,{href:"/liquibase-linter/docs/reporting/",children:"configure the reporter as normal"})," in ",(0,n.jsx)(r.code,{children:"lqlint.json"}),"."]}),"\n",(0,n.jsxs)(r.h2,{id:"adding-custom-config-to-the-reporter",children:["Adding custom config to the ",(0,n.jsx)(r.code,{children:"Reporter"})]}),"\n",(0,n.jsxs)(r.p,{children:["If additional configuration opens are required for the ",(0,n.jsx)(r.code,{children:"CustomReporter"})," to operate, extend ",(0,n.jsx)(r.code,{children:"ReporterConfig"})," and create\na new builder that extends ",(0,n.jsx)(r.code,{children:"ReporterConfig.BaseBuilder"})," and change the ",(0,n.jsx)(r.code,{children:"Factory"})," to extend ",(0,n.jsx)(r.code,{children:"ReporterConfig.BaseFactory"}),",\nadding in the ",(0,n.jsx)(r.code,{children:"Config"})," class to the generic type declaration. Add ",(0,n.jsx)(r.code,{children:"@JsonDeserialize"})," to the ",(0,n.jsx)(r.code,{children:"Config"})," class so that the\n",(0,n.jsx)(r.code,{children:"CustomReporter.Config"})," can be loaded from the Liquibase Linter configuration."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"package com.fake.fancyapp.liquibase;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.whiteclarkegroup.liquibaselinter.report.AbstractReporter;\nimport com.whiteclarkegroup.liquibaselinter.report.Report;\nimport com.whiteclarkegroup.liquibaselinter.report.ReporterConfig;\nimport com.whiteclarkegroup.liquibaselinter.report.ReportItem;\nimport java.util.List;\nimport java.io.PrintWriter;\n\npublic class CustomReporter extends AbstractReporter {\n    private static final String NAME = \"custom-reporter\";\n\n    final String customConfigOption;\n\n    protected CustomReporter(CustomReporter.Config config) {\n        super(config);\n        this.customConfigOption = config.customConfigOption;\n    }\n\n    @Override\n    protected void printReport(PrintWriter output, Report report, List<ReportItem> items) {\n        // The 'items' have already been filtered.\n        // All that is left to do is produce the output.\n        // Alternatively, extend an existing core reporter and override methods.\n    }\n\n    public static class Factory extends AbstractReporter.BaseFactory<CustomReporter, Config> {\n        public Factory() {\n            super(NAME);\n        }\n    }\n\n    @JsonDeserialize(builder = Builder.class)\n    public static class Config extends ReporterConfig {\n        final String customConfigOption;\n        \n        public Config(Builder builder) {\n            super(builder);\n            customConfigOption = builder.customConfigOption;\n        }\n    }\n\n    public static class Builder extends ReporterConfig.BaseBuilder<Builder> {\n        String customConfigOption;\n\n        public Builder withCustomConfigOption(String customConfigOption) {\n            this.customConfigOption = customConfigOption;\n            return this;\n        }\n\n        @Override\n        public Config build() {\n            return new Config(this);\n        }\n    }\n}\n"})})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>a});var n=t(6540);const i={},o=n.createContext(i);function s(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);