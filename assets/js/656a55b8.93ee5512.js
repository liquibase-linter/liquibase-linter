"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[119],{5494:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rules/column-type","title":"column-type","description":"Why?","source":"@site/docs/rules/column-type.md","sourceDirName":"rules","slug":"/rules/column-type","permalink":"/liquibase-linter/docs/rules/column-type","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"column-type"},"sidebar":"docs","previous":{"title":"column-name","permalink":"/liquibase-linter/docs/rules/column-name"},"next":{"title":"file-not-included","permalink":"/liquibase-linter/docs/rules/file-not-included"}}');var l=t(4848),o=t(8453);const i={title:"column-type"},r=void 0,a={},c=[{value:"Why?",id:"why",level:2},{value:"Options",id:"options",level:2},{value:"Example Usage",id:"example-usage",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"why",children:"Why?"}),"\n",(0,l.jsx)(n.p,{children:"You might want to enforce a pattern for the type of your columns."}),"\n",(0,l.jsx)(n.p,{children:"This rule will fail if the given regex does not match against the type when creating a column."}),"\n",(0,l.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pattern"})," - (regex, as string) regular expression that the type of any created column must adhere to"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"columnCondition"})," - (string) - ",(0,l.jsx)(n.a,{href:"https://www.baeldung.com/spring-expression-language",children:"Spring EL expression"})," that should resolve to a boolean, which if provided will decide whether the rule should be applied or not to the evaluated column. The expression scope is ",(0,l.jsx)(n.a,{href:"https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/main/java/liquibase/change/ColumnConfig.java",children:(0,l.jsx)(n.code,{children:"ColumnConfig"})})," object"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "rules": {\n    "column-type": {\n      "pattern": "^int$",\n      "columnCondition": "name == \'id\'",\n      "errorMessage": "Column type \'%s\' of column with name \'%s\' should be \'int\'"\n    }\n  }\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["(The above example just ensures that columns named ",(0,l.jsx)(n.code,{children:"id"})," should be of type ",(0,l.jsx)(n.code,{children:"int"}),".)"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const l={},o=s.createContext(l);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);