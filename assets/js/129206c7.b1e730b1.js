"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[531],{7754:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rules/illegal-change-types","title":"illegal-change-types","description":"Why?","source":"@site/docs/rules/illegal-change-types.md","sourceDirName":"rules","slug":"/rules/illegal-change-types","permalink":"/liquibase-linter/docs/rules/illegal-change-types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"illegal-change-types"},"sidebar":"docs","previous":{"title":"has-context","permalink":"/liquibase-linter/docs/rules/has-context"},"next":{"title":"index-name","permalink":"/liquibase-linter/docs/rules/index-name"}}');var a=s(4848),l=s(8453);const i={title:"illegal-change-types"},r=void 0,o={},c=[{value:"Why?",id:"why",level:2},{value:"Options",id:"options",level:2},{value:"Example Usage",id:"example-usage",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"why",children:"Why?"}),"\n",(0,a.jsxs)(n.p,{children:["Liquibase supports ",(0,a.jsx)(n.a,{href:"http://www.liquibase.org/documentation/changes/index.html",children:"a lot of different changes"}),", but there might be some you just don't want to be used in your project for one reason or another."]}),"\n",(0,a.jsx)(n.p,{children:"This rule will fail if one of the change types provided is ever used in a script."}),"\n",(0,a.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"values"})," - (array of strings) list of change types that should not be used; each can be expressed as either the tag name or the full Java class name of the ",(0,a.jsx)(n.a,{href:"https://github.com/liquibase/liquibase/tree/main/liquibase-core/src/main/java/liquibase/change/core",children:"change type"})]}),"\n",(0,a.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,a.jsxs)(n.p,{children:["To prevent ",(0,a.jsx)(n.code,{children:"loadData"})," changes being used:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "rules": {\n        "illegal-change-types": {\n            "values": ["loadData"]\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This is exactly equivalent to the above, but using the class name:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "rules": {\n        "illegal-change-types": {\n            "values": ["liquibase.change.core.LoadDataChange"]\n        }\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var t=s(6540);const a={},l=t.createContext(a);function i(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);