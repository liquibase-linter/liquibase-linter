<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://whiteclarkegroup.github.io/liquibase-linter/blog</id>
    <title>Liquibase Linter Blog</title>
    <updated>2019-11-12T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://whiteclarkegroup.github.io/liquibase-linter/blog"/>
    <subtitle>Liquibase Linter Blog</subtitle>
    <icon>https://whiteclarkegroup.github.io/liquibase-linter/img/wcg-icon.svg</icon>
    <entry>
        <title type="html"><![CDATA[New Features in Liquibase Linter 0.5.0]]></title>
        <id>https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/11/12/new-features-in-050</id>
        <link href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/11/12/new-features-in-050"/>
        <updated>2019-11-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Liquibase Linter 0.5.0 is released and available now in Maven Central!]]></summary>
        <content type="html"><![CDATA[<p>Liquibase Linter <a href="https://github.com/whiteclarkegroup/liquibase-linter/releases/tag/0.5.0" target="_blank" rel="noopener noreferrer">0.5.0 is released</a> and available now <a href="https://search.maven.org/artifact/com.whiteclarkegroup/liquibase-linter/0.5.0/jar" target="_blank" rel="noopener noreferrer">in Maven Central</a>!</p>
<p>This release has mostly been about making it easier to integrate the linter into an existing project.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="config-options-to-support-retrofitting">Config options to support retrofitting<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/11/12/new-features-in-050#config-options-to-support-retrofitting" class="hash-link" aria-label="Direct link to Config options to support retrofitting" title="Direct link to Config options to support retrofitting">​</a></h2>
<p>Using Liquibase Linter in a brand new project is pretty straightforward, but more often than not you'll be retrofitting it to an existing project with a history of changes. It's likely that many of those changes would not pass the set of rules you are applying, but since changes are supposed to be immutable, fixing them retrospectively is not really an option.</p>
<p>The configuration file now supports an "enable-after" property that can be specified at the root level and/or on individual rules, which tells the linter to only check change logs after that one. Read more on the <a href="https://whiteclarkegroup.github.io/liquibase-linter/docs/retrofitting">Retrofitting</a> page.</p>
<p>There's also the new "ignore-files-pattern" option, which is regular expression that will cause linting to be skipped for change logs whose file path match against it. If you are able to segregate your historical changes into a separate directory/module when integrating Liquibase Linter, this might be a simpler way to exclude them from linting.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-formatted-sql-change-logs">Support for formatted SQL change logs<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/11/12/new-features-in-050#support-for-formatted-sql-change-logs" class="hash-link" aria-label="Direct link to Support for formatted SQL change logs" title="Direct link to Support for formatted SQL change logs">​</a></h2>
<p>Whilst we already had support for XML, JSON and YAML formats, support for <a href="https://www.liquibase.org/documentation/sql_format.html" target="_blank" rel="noopener noreferrer">Formatted SQL format</a> was missing until now - not that we would recommend using formatted SQL changes...</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="technical-improvements">Technical improvements<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/11/12/new-features-in-050#technical-improvements" class="hash-link" aria-label="Direct link to Technical improvements" title="Direct link to Technical improvements">​</a></h2>
<p>There have been some good changes under the hood as well:</p>
<ul>
<li>The integration tests have been refactored; it's now much easier to add a new test</li>
<li>PMD is now running against the project for increased quality control</li>
<li>The Travis build now runs against a range of Liquibase versions</li>
<li>Several dependencies were brought up to date</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next">Next<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/11/12/new-features-in-050#next" class="hash-link" aria-label="Direct link to Next" title="Direct link to Next">​</a></h2>
<p>We have a few key things lined up as we move towards a 1.0.0 release:</p>
<ul>
<li>
<p>Providing a "recommended" config that you can extend</p>
</li>
<li>
<p>Reporting in JUnit format for CI tools</p>
</li>
<li>
<p>Providing a JSON schema for the configuration file</p>
</li>
<li>
<p>Improved documentation for running with tools other than Maven</p>
</li>
</ul>]]></content>
        <author>
            <name>David Goss</name>
            <uri>http://davidgoss.co/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[New Features in Liquibase Linter 0.4.0]]></title>
        <id>https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/06/21/new-features-in-040</id>
        <link href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/06/21/new-features-in-040"/>
        <updated>2019-06-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Liquibase Linter 0.4.0 is released and available now in Maven Central!]]></summary>
        <content type="html"><![CDATA[<p>Liquibase Linter <a href="https://github.com/whiteclarkegroup/liquibase-linter/releases/tag/0.4.0" target="_blank" rel="noopener noreferrer">0.4.0 is released</a> and available now <a href="https://search.maven.org/artifact/com.whiteclarkegroup/liquibase-linter/0.4.0/jar" target="_blank" rel="noopener noreferrer">in Maven Central</a>!</p>
<p>This release has mostly been about improving the flexibility of existing features and rules.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="newupdated-core-rules">New/updated core rules<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/06/21/new-features-in-040#newupdated-core-rules" class="hash-link" aria-label="Direct link to New/updated core rules" title="Direct link to New/updated core rules">​</a></h2>
<ul>
<li>The <a href="https://whiteclarkegroup.github.io/liquibase-linter/docs/rules/file-not-included">new <code>file-not-included</code> rule</a> can be used to flag up when a new script has been created and dropped into the project, but not included in the main changelog (and therefore never run). This is a very easy mistake to make, and would often otherwise rely on code review to catch it.</li>
<li>The <a href="https://whiteclarkegroup.github.io/liquibase-linter/docs/rules/modify-data-enforce-where">existing <code>modify-data-enforce-where</code> rule</a> has been given some more power via support for a <code>pattern</code> - so now as well as enforcing that updates/deletes on certain tables always have a <code>&lt;where&gt;</code> condition, you can also provide a regular expression that describes what that should look like.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="multiple-configs-support">Multiple configs support<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2019/06/21/new-features-in-040#multiple-configs-support" class="hash-link" aria-label="Direct link to Multiple configs support" title="Direct link to Multiple configs support">​</a></h2>
<p>Until now, as with most rules-based quality tools, each rule you used in Liquibase Linter would be configured once. Our attempts to make better use of the <code>modify-data-enforce-where</code> rule mentioned above showed this up as a limitation; sometimes you want to use a rule in different ways for different use cases. For example, you may have several tables that should never have unqualified updates, but have very different requirements in terms of what the <code>&lt;where&gt;</code> condition should look like.</p>
<p>Multiple configs can also be desirable even when you aren't handling different use cases; for any of the rules concerned with naming, you might find that a single regular expression is a little unwieldy, or that having more granular failure messaging would better serve your developers.</p>
<p>So, where normally you would provide a single configuration object for any rule in your config file, you can now <a href="https://whiteclarkegroup.github.io/liquibase-linter/docs/rules/#multiple-configs">provide an array of them</a> if you like, and they will be applied with "AND" logic - so they all have to pass for any change(set|log).</p>]]></content>
        <author>
            <name>David Goss</name>
            <uri>http://davidgoss.co/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[New Features in Liquibase Linter 0.3.0]]></title>
        <id>https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/11/30/new-features-in-030</id>
        <link href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/11/30/new-features-in-030"/>
        <updated>2018-11-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Liquibase Linter 0.3.0 is released and available now in Maven Central!]]></summary>
        <content type="html"><![CDATA[<p>Liquibase Linter <a href="https://github.com/whiteclarkegroup/liquibase-linter/releases/tag/0.3.0" target="_blank" rel="noopener noreferrer">0.3.0 is released</a> and available now <a href="https://search.maven.org/artifact/com.whiteclarkegroup/liquibase-linter/0.3.0/jar" target="_blank" rel="noopener noreferrer">in Maven Central</a>!</p>
<p>In this release we have fixed a few issues, but primarily we've been restructuring the codebase and adding new features including improved logging and custom rules support.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-core-rules">New core rules<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/11/30/new-features-in-030#new-core-rules" class="hash-link" aria-label="Direct link to New core rules" title="Direct link to New core rules">​</a></h2>
<ul>
<li>The <a href="https://whiteclarkegroup.github.io/liquibase-linter/docs/rules/no-schema-name">new <code>no-schema-name</code> rule</a> will prevent changes that use the <code>schemaName</code> attribute. This supports the practise we follow internally, where we run Liquibase once per schema with a user who only has access to that schema.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="json-and-yaml-support">JSON and YAML support<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/11/30/new-features-in-030#json-and-yaml-support" class="hash-link" aria-label="Direct link to JSON and YAML support" title="Direct link to JSON and YAML support">​</a></h2>
<p>You can now use Liquibase Linter with scripts written in JSON or YAML, as well as XML.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="console-reporting-and-fail-fast">Console reporting and <code>fail-fast</code><a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/11/30/new-features-in-030#console-reporting-and-fail-fast" class="hash-link" aria-label="Direct link to console-reporting-and-fail-fast" title="Direct link to console-reporting-and-fail-fast">​</a></h2>
<p>Previously, we would exit the Liquibase process as soon as the first rule failed. This was not ideal if there were several script issues, as you would need to fix each one in order to find the next --- this made it especially tedious to try to retrofit the linter to an existing project.</p>
<p>Now, we allow <em>all</em> changes to be checked, collecting failures as we go and reporting them in a readable way in the console at the end:</p>
<img alt="Example console output for failed rules" src="https://whiteclarkegroup.github.io/liquibase-linter/img/console-example.png">
<p>(Note that we still don't allow any script to be run if there is a failure; the linter hooks into the parsing phase of Liquibase's lifecycle, and with failures we force the process to exit before it even starts generating SQL.)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="custom-rules">Custom rules<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/11/30/new-features-in-030#custom-rules" class="hash-link" aria-label="Direct link to Custom rules" title="Direct link to Custom rules">​</a></h2>
<p>You can now write your own rule that's specific to your project or company and use it in Liquibase Linter. There's a <a href="https://whiteclarkegroup.github.io/liquibase-linter/docs/custom-rules">complete guide in the docs</a>, but essentially you just need to write a Java class and do a little configuration in your project.</p>
<p>This is the change we're most excited about, as it will give users the power to extend the linter to solve their own particular problems with relative ease.</p>
<p>In support of this, we've also refactored the codebase quite heavily so that all of our core rules are implemented using the same mechanism as custom rules, so any additional power that gets added to rules in future will benefit both.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next">Next<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/11/30/new-features-in-030#next" class="hash-link" aria-label="Direct link to Next" title="Direct link to Next">​</a></h2>
<p>Here are some things we've got lined up for the next couple of releases:</p>
<ul>
<li>Improving the core suite of rules</li>
<li>Support for running with Gradle</li>
<li>Flexible reporting e.g. JUnit, HTML</li>
</ul>]]></content>
        <author>
            <name>David Goss</name>
            <uri>http://davidgoss.co/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Liquibase Linter]]></title>
        <id>https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/09/10/introducing-liquibase-linter</id>
        <link href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/09/10/introducing-liquibase-linter"/>
        <updated>2018-09-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This morning, we're very pleased to announce Liquibase Linter, an open source lint tool for Liquibase.]]></summary>
        <content type="html"><![CDATA[<p>This morning, we're very pleased to announce <a href="https://github.com/whiteclarkegroup/liquibase-linter" target="_blank" rel="noopener noreferrer">Liquibase Linter</a>, an open source lint tool for Liquibase.</p>
<p>We've been working on it internally at White Clarke Group for a few months now, and are excited to have it out in the wild and see the feedback from the Liquibase community.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="background">Background<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/09/10/introducing-liquibase-linter#background" class="hash-link" aria-label="Direct link to Background" title="Direct link to Background">​</a></h2>
<p>We lean on a lot of Liquibase's feature at WCG; we have a core product but with multiple client contexts, we  support several different database vendors, and it's also integral to our release and deployment process.</p>
<p>While we'd had great success with lint tools and other types of testing in pushing up our <em>code</em> quality, preventing issues with database scripts had remained elusive; it's quite an error-prone activity — especially given how difficult it can sometimes be to undo changes once they have gone in — but there isn't really much tooling to leverage around what is basically some plain XML (or YAML or JSON). There didn't seem to be any kind of quality control tool out there for Liquibase (there still doesn't).</p>
<p>So, we started looking at <a href="https://liquibase.jira.com/wiki/spaces/CONTRIB/overview" target="_blank" rel="noopener noreferrer">Liquibase's extensions system</a>, and how we could use use it to do some parse-time checks that would prevent changes going into a database if they didn't follow the standards we set out. That worked out pretty well, and so Liquibase Linter has been built up from there.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configurability">Configurability<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/09/10/introducing-liquibase-linter#configurability" class="hash-link" aria-label="Direct link to Configurability" title="Direct link to Configurability">​</a></h3>
<p>Many lint tools are self-styled as being "opinionated" — they are somewhat inflexible in the style and conventions they enforce. This can be a good fit for some things (the success of <a href="https://standardjs.com/" target="_blank" rel="noopener noreferrer">Standard</a> in the JavaScript world is one example) but we knew that making Liquibase Linter like that would be just about the worst thing we could do with it; people's needs from, and usages of, Liquibase vary hugely, and we want as many of them as possible to be able to take advantage of this tool.</p>
<p>So there is no "standard" config — all the rules are off by default — and for the <a href="https://whiteclarkegroup.github.io/liquibase-linter/docs/rules/">rules you turn on</a> you can configure them in a way that makes sense for your project, so it's up to you what you do with contexts, how you name tables and constraints, which databases you support, what types of change you want to allow, etc.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="influence">Influence<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/09/10/introducing-liquibase-linter#influence" class="hash-link" aria-label="Direct link to Influence" title="Direct link to Influence">​</a></h3>
<p>I wanted to give a special mention here to <a href="https://eslint.org/" target="_blank" rel="noopener noreferrer">ESLint</a>. We use it on lots of products at WCG and I've been a big fan of the project for years, so it's not really surprising that it ended up influencing the majority of the design decisions we made, from things like what the config file should look like, to the idea of custom rules, to just the impressively high standard of documentation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="next">Next<a href="https://whiteclarkegroup.github.io/liquibase-linter/blog/2018/09/10/introducing-liquibase-linter#next" class="hash-link" aria-label="Direct link to Next" title="Direct link to Next">​</a></h2>
<p>We've already got a lot of changes in the pipeline that might be of interest:</p>
<ul>
<li>Aggregating failures and producing a report <a href="https://github.com/whiteclarkegroup/liquibase-linter/issues/20" target="_blank" rel="noopener noreferrer">(issue)</a></li>
<li>Support for defining your own rules <a href="https://github.com/whiteclarkegroup/liquibase-linter/milestone/1" target="_blank" rel="noopener noreferrer">(milestone)</a></li>
<li>Support for YAML and JSON changelog files <a href="https://github.com/whiteclarkegroup/liquibase-linter/milestone/2" target="_blank" rel="noopener noreferrer">(milestone)</a></li>
<li>Support for running with Gradle <a href="https://github.com/whiteclarkegroup/liquibase-linter/issues/23" target="_blank" rel="noopener noreferrer">(issue)</a></li>
</ul>
<p>If you find any bugs, have any feature ideas, or think a new core rule should be added, please <a href="https://github.com/whiteclarkegroup/liquibase-linter/issues" target="_blank" rel="noopener noreferrer">submit an issue on GitHub</a>.</p>]]></content>
        <author>
            <name>David Goss</name>
            <uri>http://davidgoss.co/</uri>
        </author>
    </entry>
</feed>